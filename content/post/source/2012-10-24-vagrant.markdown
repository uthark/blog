---
categories:
- vagrant
- automatization
- virtualization
- development environment
- development
comments: true
date: 2012-10-24T00:00:00Z
published: true
sharing: true
title: Автоматизируем работу с виртуальными машинами с помощью Vagrant
url: /2012/10/24/vagrant/
---

Современные enterprise проекты очень часто имеют очень сложную инфраструктуру для развёртывания. Кроме того, во время разработки часто используются виртуальные машины. Например, может использоваться несколько виртуальных машин, на которых развёрнуты различные конфигурации софта.

[Vagrant](http://vagrantup.com/) - это средство для управления виртуальными машинами на базе [Virtualbox](https://www.virtualbox.org/).

## Возможности

 * Создание виртуальных машин с определённой, заранее заданной, конфигурацией.
 * Лёгкое создание копии виртуальной машины, используя заранее подготовленный образ.
 * Осуществление provisioning для новых виртуальных машин.

## Работа с Vagrant

Для начала необходимо установить Virtualbox и Vagrant.

```sh
sudo aptitude install virtualbox vagrant
```

После этого нам нужен образ, из которого мы можем создавать виртуальные машины. Его можно сделать самим или взять уже готовый с сайта Vagrant. Упростим себе жизнь и скачаем образ с сайта:

```sh
    vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
```

После этого, мы можем начать пользоваться Vagrant.

Для этого нам нужно создать папку, в которой мы будем работать, например:

```sh
    mkdir vagrant-test
    cd vagrant-test
```

И инициализировать Vagrant:

```sh
    vagrant init
```

Результатом работы этой команды будет файлик `Vagrantfile`, который содержит конфигурацию виртуальной машины для использования.

Пример сгенерированного файла:

```ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "base"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 8080

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "base.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # IF you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end

```

Подробнее о том, что этот файл может содержать можно почитать в [документации](http://vagrantup.com/v1/docs/vagrantfile.html)

Например, можно изменить размер RAM, доступный операционной системе:

```ruby
    config.vm.customize ["modifyvm", :id, "--memory", 1536]
```

Так как очень часто мы хотим взаимодействовать с виртуальной машиной снаружи, там нам необходима возможность пробросить порты из виртуальной машины в хост-систему.

Это достигается следующим изменением конфигурации:

```ruby
  # Включаем bridged network в виртуальной машине.
  config.vm.network :bridged

  # Пробрасываем порты <порт на виртуальной машине> <порт на хост-системе>
  config.vm.forward_port 80, 8080
  config.vm.forward_port 443, 8443
```


## Provisioning

Vagrant не был бы столь успешен, если бы не позволял управляеть конфигурацией создаваемой виртуальной машины.

Vagrant поддерживает следующие приложения, управляющие конфигурацией:

 * [Chef](http://wiki.opscode.com/display/chef/Home)
 * [Puppet](http://puppetlabs.com/puppet/puppet-open-source/)
 * [Shell](http://www.gnu.org/software/bash/manual/bashref.html)

А также позволяет использовать написать [собственное расширение](http://vagrantup.com/v1/docs/provisioners/others.html).

## Управление виртуальной машиной

Управление виртуальной машиной осуществляется командой `vagrant` с переданным аргументом-действием. Полный список можно получить, выполнив `vagrant help`.

Список наиболее часто используемых действий:

 * `up` - поднимает виртуальную машину. Если она не была создана, то создаёт её, используя информацию из файла `Vagrantfile`.
 * `halt` - останавливает виртуальную машину.
 * `provision` - обновляет конфигурацию софта на виртуальной машине.
 * `reload` - перезагружает виртуальную машину.
 * `ssh` - запускает SSH-соединение к машине.

## Документация и ссылки

 * [Официальный сайт](http://vagrantup.com/)
 * [Документация](http://vagrantup.com/v1/docs/index.html)
 * [Исходный код](https://github.com/mitchellh/vagrant)
