---
categories:
- article
- производительность
- java
- performance optimization
- база данных
- grails
- groovy
- development
date: 2010-02-06T23:31:00Z
title: Список для проверки при оптимизации Grails приложений
url: /2010/02/06/grails/
---

Выкладываю ниже список задач, которые нужно/можно выполнить для оптимизации приложения, написанного на Grails, может кому пригодится.

#### Тестирование проведённых оптимизаций

Первым делом необходимо разработать критерии проверки, которые позволят оценить эффективность проведённых оптимизаций.

1. Установить <a href="http://code.google.com/p/javamelody/">Java Melody</a> <a href="http://www.grails.org/plugin/grails-melody">плагин</a> для Grails для проведения анализа.
1. Разработать скрипты для проведения нагрузочного тестирования.
1. Прогнать скрипты.
1. Проанализировать результаты Java Melody, выявить узкие места, произвести нужные оптимизации.

#### Общие оптимизации

Очень часто обновление до последней версии используемых библиотек попутно улучшает производительность.

1. Обновить Java до последней версии
1. Обновить Groovy до последней версии.
1. Обновить Grails до последней версии.
1. Обновить jQuery до последней версии.
1. Оптимизировать настройки виртуальной машины Java (например, -server -Xmx270m -Xms270m -XX:MaxPermSize=80m -Xverify:none -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+UseAdaptiveSizePolicy -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=31 -XX:+AggressiveOpts)
a. http://java.sun.com/javase/technologies/hotspot/gc/gc_tuning_6.html
Вообще, по оптимизации JVM написаны целые книги, так что не буду здесь останавливаться.


#### Оптимизация клиентской части

1. Настроить <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/context.html">кэширование статических ресурсов</a> в Томкате.
1. Настроить <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/http.html">сжатие статических ресурсов</a> в Томкате.
1. (поставить прокси на nginx для кэширования статических ресурсов ?)
1. Установить плагины для Firebug, которые оценят производительность клиентской части.
    1. <a href="http://code.google.com/speed/page-speed">PageSpeed</a> </li>
    1. <a href="http://developer.yahoo.com/yslow/">YSlow</a> </li>
    1. Проанализировать страницы веб-сайта с их помощью
1. Провести предлагаемые оптимизации.


#### Оптимизация клиентской части приложений, написанных на Grails

1. Установить плагин <a href="http://www.grails.org/plugin/ui-performance">UI Performance</a>
1. Провести оптимизацию с использованием плагина UI Performance

#### Оптимизация базы данных

1. Оптимизировать производительность сервера базы данных (SQL Server)
    a. http://www.sql-server-performance.com/tips/all_main.aspx
    a. http://msdn.microsoft.com/en-us/library/ms998577.aspx
1. Проверить наличие индексов в базе данных, добавить необходимые
1. Найти неоптимальные запросы в БД, оптимизировать

#### Оптимизация работы с базой данных

1. Обновить версию JDBC-драйвера
1. Настроить кэширование в Hibernate.
Ресурсов в сети предостаточно, навскидку <a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html">вот</a> <a href="http://www.devx.com/dbzone/Article/29685/1954"> парочка</a>.

#### Оптимизация серверной части приложения

1. Произвести профилирование приложения (использовать Visual VM, YJP Profiler), найти узкие места и оптимизировать их.

#### Оптимизация серверной части приложения (опционально)

1. Установить плагин <a href="http://www.grails.org/plugin/perf4j">Perf4J</a> для грэйлза
1. Добавить необходимые счётчики в код
1. Прогнать нагрузочные тесты, найти узкие места, оптимизировать.


#### Заключение
В целом, в данном списке нет ничего нового, это всего лишь компиляция публично доступных материалов. Тем не менее, решил это опубликовать, чтобы сэкономить время другим.
